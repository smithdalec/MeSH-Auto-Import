<?php
/**
 * Implements hook_menu(). 
 */
function mesh_import_menu() {
  $items['admin/config/content/mesh-auto-import'] = array(
    'title'             => 'MeSH Auto-Import Configuration',
    'description'       => 'Configure the fields to use with MeSH Auto-Import',
    'page callback'     => 'mesh_import_admin',
    'access arguments'  => array('administer mesh-auto-import'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function mesh_import_permission() {
  return array(
    'administer mesh-auto-import' => array(
      'title' => t('Administer MeSH Auto-Import'),
      'description' => t('Allows user to access MeSH Auto-Import administration page'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function mesh_import_help($path, $arg) {
  switch ($path) {
    case 'admin/help#mesh_import':
      return t('MeSH Auto-Import lets the user automatically import MeSH subject
        headings when a new node is created. The node must have two fields
        attached: a multivalued term-reference field referencing a taxonomy of 
        MeSH headings, and a text field for storing the PubMed ID.');
  }
}

/**
 * hook_menu() callback for admin/config/content/mesh-auto-import
 * @return string 
 */
function mesh_import_admin() {
  return drupal_get_form('mesh_import_admin_form');
}

/**
 * Form callback function 
 */
function mesh_import_admin_form($form, &$form_state) {
  $settings = mesh_import_get_settings();
  
  // Build a list of existing fields to use as options for the select lists
  foreach (field_info_fields() as $field => $info) {
    if (isset($info['field_name'])) {
      if ($info['type'] == 'number_integer') {
        $int_fields[$info['field_name']] = $info['field_name'];
      }
      elseif ($info['type'] == 'taxonomy_term_reference') {
        $ref_fields[$info['field_name']] = $info['field_name'];
      }
    }
  }
  
  $vocabulary_objects = taxonomy_get_vocabularies();
  foreach ($vocabulary_objects as $vid => $vocabulary) {
    $vocabularies[$vid] = $vocabulary->name;
  }
  $form['pmid'] = array(
    '#type' => 'select',
    '#title' => t('PubMed ID field'),
    '#default_value' => $settings['pmid'],
    '#options' => $int_fields,
    '#description' => t('Integer field that stores the PubMed ID for
      a document.'),
  );
  $form['term_reference'] = array(
    '#type' => 'select',
    '#title' => t('MeSH term reference field'),
    '#default_value' => $settings['term_ref'],
    '#options' => $ref_fields,
    '#description' => t('Taxonomy term reference field which references a
      Vocabulary of MeSH terms.'),
  );
  $form['mesh_vocabulary'] = array(
    '#type' => 'select',
    '#title' => t('MeSH terms vocabulary'),
    '#default_value' => $settings['vocabulary'],
    '#options' => $vocabularies,
    '#description' => t('Taxonomy vocabulary that contains MeSH terms'),
  );
    $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  
  return $form;
}

/**
 * Get the admin settings as set by the user using drupal's variable system.
 * 
 * @return array An associative array of variables and their values
 */
function mesh_import_get_settings() {
  $settings['pmid'] = variable_get('mesh_import_pmid');
  $settings['term_ref'] = variable_get('mesh_import_term_ref');
  $settings['vocabulary'] = variable_get('mesh_import_vocabulary');
  $settings['settings_saved'] = variable_get('mesh_import_settings_saved');
  
  return $settings;
}

/**
 * Form submission callback for mesh_import_admin_form
 *
 * @param type $form
 * @param type $form_state 
 */
function mesh_import_admin_form_submit($form, &$form_state) {
  variable_set('mesh_import_pmid', $form_state['values']['pmid']);
  variable_set('mesh_import_term_ref', $form_state['values']['term_reference']);
  variable_set('mesh_import_vocabulary', $form_state['values']['mesh_vocabulary']);
  variable_set('mesh_import_settings_saved', TRUE);
  
  drupal_set_message(t('Settings have been saved.'));
}

/**
 * Implements hook_node_presave().
 */
function mesh_import_node_presave($node) {
  // Array of settings defined by the user, including the names of fields to
  // store the PubMed ID, MeSH taxonomy term reference, and MeSH vocabulary ID.
  
  $settings = mesh_import_get_settings();
  
  // Fetch the Pubmed ID from the associated Drupal Field from the node object
  $pmid = field_get_items('node', $node, 'field_pmid');
  // Extract the actual value from the field's data structure
  $pmid = $pmid[0]['value'];
  // By default, Drupal puts spaces in integer values. Remove them, if existing.
  $pmid = preg_replace('/ /', '', $pmid);
  
  // Get a list of all field instances for this node type
  $instances = field_info_instances('node', $node->type);
  $mesh_field_exists = (isset($instances[$settings['term_ref']]))? TRUE : FALSE;
  $pmid_field_exists = (isset($instances[$settings['pmid']]))? TRUE : FALSE;
  if ($mesh_field_exists === FALSE || $settings['pmid'] === FALSE) {
    // We only want to take the time to talk to NIH if this is a node that has
    // the required pmid/mesh fields, and admin settings have been set
    return;
  }
  // NIH URL to retrieve XML docs
  $url = 'http://www.ncbi.nlm.nih.gov/pubmed/' . $pmid . '?report=xml';
  $response = drupal_http_request($url);
  
  // Make sure we get a valid response code from NIH
  if (!isset($response->code) || empty($response->code)) {
    drupal_set_message('Could not get a valid response from NIH. No MeSH Terms
      were added to this node.');
    return;
  }
  
  // Make sure we get a 200 "OK" response
  if ($response->code != '200') {
    drupal_set_message('Unable to retrieve a document from NIH with a PubMed ID 
      of ' . $pmid . '. No MeSH terms were added to this node.', 'error');
    if (isset($response->error)) {
      drupal_set_message('Response code from NIH: ' . $response->code . ' ' . 
        $response->error, 'error');
    }
    return;
  }
  
  // Convert sanitized XML string into an XML object
  $xml = simplexml_load_string(mesh_import_filter_xml($response->data));
  
  // Retrieve the MeSH terms from the XML object
  $heading_objects = $xml->PubmedArticle->MedlineCitation->MeshHeadingList->MeshHeading;
  foreach ($heading_objects as $heading) {
    $terms[] = (string)$heading->DescriptorName;
  }
  
  // Convert standard iterative array keys to Taxonomy term IDs
  $terms = mesh_import_tids($terms, $settings['vocabulary']);
  
  // MeSH terms that already exist in the MeSH field (user submitted terms, or
  // we are editing a previously saved node
  $submitted_terms = field_get_items('node', $node, 'field_mesh');
  $lang = $node->language;
  if (empty($submitted_terms)) {
    $delta = 0;
    // Add the list of retrieved MeSH terms to the (multivalued) mesh field
    foreach($terms as $tid => $term) {
      $node->{$settings['term_ref']}[$lang][$delta]['tid'] = $tid;
      $delta++;
    }
  }
}

/**
 * Implements hook_form_alter
 */
function mesh_import_form_alter(&$form, &$form_state, &$form_id) {
  if (isset($form['field_mesh']) && isset($form['field_pmid'])) {
    $form['field_mesh']['und']['#description'] = t('
      Leave this field blank to automatically find MeSH terms based on the 
      PubMed ID
    ');
  }
}

/**
 * Given an array of taxonomy term strings, returns the same array of terms,
 * but keyed by the taxonomy term's term ID (tid)
 *
 * @param array $terms Array of taxonomy terms
 * @param int $vid The ID of the vocabulary from which the terms exist.
 *  Leave blank to search all taxonomy vocabularies
 * @return int Array of taxonomy terms, keyed by tid
 */
function mesh_import_tids($terms, $vid = FALSE) {
  // Get each MeSH term's Taxonomy term ID
  foreach ($terms as $term) {
    $query = db_select('taxonomy_term_data', 'td')
      ->fields('td', array('tid', 'vid', 'name'))
      ->condition('name', $term);
    if ($vid) {
      $query->condition('vid', $vid);
    }
    $result = $query->execute();
    $i = 0;
    foreach ($result as $row) {
      // We only want one id per term (takes care of duplicate terms in taxonomy)
      if ($i > 0) continue;
      $return_terms[$row->tid] = $row->name;
      $i++;
    }
  }
  
  return $return_terms;
}

/**
 * Filters out the odd XML characters (HTML-formatted < and > symbols) that NIH
 * sends to actual XML characters.
 *
 * @param string $xml the raw "xml" string sent from NIH
 * @return string The same string, converted to real XML
 */
function mesh_import_filter_xml($xml) {
  $patterns = array('/&lt;/', '/&gt;/');
  $replacements = array('<', '>');
  return preg_replace($patterns, $replacements, $xml);
}
