<?php
/**
 * @todo Add admin page with ability to input the pmid field, term reference field, vid and store them as drupal variables
 *  
 */

/**
 * Implements hook_node_presave().
 */
function mesh_add_node_presave($node) {
  // Taxonomy Vocabulary ID
  $vid = 7;
  // Names of fields that will be used
  $term_reference_field = 'field_mesh';
  $pmid_field = 'field_pmid';
  
  // Fetch the Pubmed ID from the associated Drupal Field from the node object
  $pmid = field_get_items('node', $node, 'field_pmid');
  // Extract the actual value from the field's data structure
  $pmid = $pmid[0]['value'];
  // By default, Drupal puts spaces in integer values. Remove them, if existing.
  $pmid = preg_replace('/ /', '', $pmid);
  
  // Get a list of all field instances for this node type
  $instances = field_info_instances('node', $node->type);
  $mesh_field_exists = (isset($instances[$term_reference_field]))? TRUE : FALSE;
  $pmid_field_exists = (isset($instances[$pmid_field]))? TRUE : FALSE;
  if ($mesh_field_exists === FALSE || $pmid_field === FALSE) {
    // We only want to take the time to talk to NIH if this is a node that has
    // the required pmid/mesh fields
    return;
  }
  
  // NIH URL to retrieve XML docs
  $url = 'http://www.ncbi.nlm.nih.gov/pubmed/' . $pmid . '?report=xml';
  $response = drupal_http_request($url);
  
  // Make sure we get a valid response code from NIH
  if (!isset($response->code) || empty($response->code)) {
    drupal_set_message('Could not get a valid response from NIH. No MeSH Terms
      were added to this node.');
    return;
  }
  
  // Make sure we get a 200 "OK" response
  if ($response->code != '200') {
    drupal_set_message('Unable to retrieve a document from NIH with a PubMed ID 
      of ' . $pmid . '.', 'error');
    if (isset($response->error)) {
      drupal_set_message('Response code from NIH: ' . $response->code . ' ' . 
        $response->error, 'error');
    }
    return;
  }
  
  // Convert sanitized XML string into an XML object
  $xml = simplexml_load_string(mesh_add_filter_xml($response->data));
  
  // Retrieve the MeSH terms from the XML object
  $heading_objects = $xml->PubmedArticle->MedlineCitation->MeshHeadingList->MeshHeading;
  foreach ($heading_objects as $heading) {
    $terms[] = (string)$heading->DescriptorName;
  }
  
  // Convert standard iterative array keys to Taxonomy term IDs
  $terms = mesh_add_tids($terms, $vid);
  
  // MeSH terms that already exist in the MeSH field (user submitted terms, or
  // we are editing a previously saved node
  $submitted_terms = field_get_items('node', $node, 'field_mesh');
  $lang = $node->language;
  if (empty($submitted_terms)) {
    $delta = 0;
    // Add the list of retrieved MeSH terms to the (multivalued) mesh field
    foreach($terms as $tid => $term) {
      $node->{$term_reference_field}[$lang][$delta]['tid'] = $tid;
      $delta++;
    }
  }
}

/**
 * Implements hook_form_alter
 */
function mesh_add_form_alter(&$form, &$form_state, &$form_id) {
  if (isset($form['field_mesh']) && isset($form['field_pmid'])) {
    $form['field_mesh']['und']['#description'] = t('
      Leave this field blank to automatically find MeSH terms based on the 
      PubMed ID
    ');
  }
}

/**
 * Given an array of taxonomy term strings, returns the same array of terms,
 * but keyed by the taxonomy term's term ID (tid)
 *
 * @param array $terms Array of taxonomy terms
 * @param int $vid The ID of the vocabulary from which the terms exist.
 *  Leave blank to search all taxonomy vocabularies
 * @return int Array of taxonomy terms, keyed by tid
 */
function mesh_add_tids($terms, $vid = FALSE) {
  // Get each MeSH term's Taxonomy term ID
  foreach ($terms as $term) {
    $query = db_select('taxonomy_term_data', 'td')
      ->fields('td', array('tid', 'vid', 'name'))
      ->condition('name', $term);
    if ($vid) {
      $query->condition('vid', $vid);
    }
    $result = $query->execute();
    $i = 0;
    foreach ($result as $row) {
      // We only want one id per term (takes care of duplicate terms in taxonomy)
      if ($i > 0) continue;
      $return_terms[$row->tid] = $row->name;
      $i++;
    }
  }
  
  return $return_terms;
}

/**
 * Filters out the odd XML characters (HTML-formatted < and > symbols) that NIH
 * sends to actual XML characters.
 *
 * @param string $xml the raw "xml" string sent from NIH
 * @return string The same string, converted to real XML
 */
function mesh_add_filter_xml($xml) {
  $patterns = array('/&lt;/', '/&gt;/');
  $replacements = array('<', '>');
  return preg_replace($patterns, $replacements, $xml);
}
