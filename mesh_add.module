<?php

/**
 * Implements hook_menu(). 
 */
function mesh_add_menu() {
  $items['mesh-add'] = array(
    'title'             => 'Development page for MeSH Add',
    'page callback'     => 'mesh_add_dev',
    'access arguments'  => array('access mesh content'),
  );
  $items['mesh-add/import'] = array(
    'title'             => 'Import terms to Taxonomy from CSV',
    'page callback'     => 'mesh_add_dev_import',
    'access arguments'  => array('access mesh content'),
    'type'              => MENU_LOCAL_ACTION,
  );
  
  return $items;
}

/**
 * Implements hook_permission().
 */
function mesh_add_permission() {
  return array(
    'access mesh content' => array(
      'title' => t('Access MeSH Add content'),
      'description' => t('Allows user to import MeSH headings'),
    ),
  );
}

/**
 * hook_menu() callback for /mesh-add
 * @return string 
 */
function mesh_add_dev() {
  return '';
}

/**
 * hook_menu() callback for /mesh-add/import
 * @return string 
 */
function mesh_add_dev_import() {
  $terms = mesh_add_read_csv();
  
  $vocabulary = new stdClass();
  $vocabulary->name = 'MeSH Terms - TEST';
  $vocabulary->machine_name = 'mesh_terms_test';
  
  $vid = mesh_add_get_vid($vocabulary->machine_name);
  // If the vocab exists, delete it so we can create a new one.
  if ($vid) {
    drupal_set_message("Existing vocabulary found (vid: $vid).");
    $result = db_select('taxonomy_term_data', 'd')
      ->fields('d', array('tid'))
      ->condition('vid', $vid)
      ->execute();
    $message = "The following term IDs will be deleted: ";
    foreach ($result as $row) {
      $message .= "$row->tid ";
      taxonomy_term_delete($row->tid);
    }
    drupal_set_message($message);
//    db_delete('taxonomy_term_data')->condition('vid', $vid)->execute();
  }
  
  foreach($terms as $term_data) {
    $term_data_query_values[] = array(
      'tid' => $term_data['term_id'],
      'vid' => $vid,
      'name' => $term_data['term_name'],
      'description' => 'desc',
    );
    $term_hierarchy_query_values[] = array(
      'tid' => $term_data['term_id'],
      'parent' => $term_data['parent_id_1'],
    );
  }

  $term_data_query = db_insert('taxonomy_term_data')
    ->fields(array('tid', 'vid', 'name', 'description'));
  foreach($term_data_query_values as $values) {
    $term_data_query->values($values);
  }
  $term_data_query->execute();
  
  $term_hierarchy_query = db_insert('taxonomy_term_hierarchy')
    ->fields(array('tid', 'parent'));
  foreach($term_hierarchy_query_values as $values) {
    $term_hierarchy_query->values($values);
  }
  $term_hierarchy_query->execute();
  
//  foreach ($terms as $term_data) {
//    $term = new stdClass();
//    $term->vid = $vid;
//    $term->name = $term_data['term_name'];
//    $term->tid = $term_data['term_id'];
//    $term->description = $term_data['description'];
//    $term->parent = $term_data['parent_id_1'];
//    $result = taxonomy_term_save($term);
//  }
  
  return '';
}

/**
 * Given a machine name of a taxonomy vocabulary, returns the vid of that 
 * vocabulary 
 * 
 * @param string The machine name of the vocabulary, as specified in the
 *  machine_name column of the taxonomy_vocabulary table
 * @return mixed The vid of the specified vocabulary, FALSE if that vocabulary
 *  doesn't exist
 */
function mesh_add_get_vid($machine_name) {
  $existing_vocabularies = db_select('taxonomy_vocabulary', 'v')
    ->fields('v', array('vid'))
    ->condition('machine_name', $machine_name)
    ->execute();
  
  $vid = FALSE;
  foreach ($existing_vocabularies as $voc) {
    // If, for some reason, more than one vocabulary is returned, only the last
    // vocabulary id will be retrieved.
    $vid = $voc->vid;
  }
  
  return $vid;
}

/**
 * Iterates through mesh_taxonomy.csv and builds an array of the CSV data
 * @return array  The data from the CSV file
 */
function mesh_add_read_csv() {
  $csv_file = drupal_get_path('module', 'mesh_add') . '/mesh_taxonomy_sample.csv';
  $handle = fopen($csv_file, 'r');
  
  while(!feof($handle)) {
    // Iterative array of the columns from the current csv row
    $row = fgetcsv($handle, 10000, ',');
    foreach($row as $delta => $value) {
      // Associate columns of csv
      switch ($delta) {
        case 0:
          $key = 'voc_id';
          break;
        case 1:
          $key = 'term_id';
          break;
        case 2:
          $key = 'term_name';
          break;
        case 3:
          $key = 'description';
          break;
        default:
          $parent_delta = $delta-3;
          $key = "parent_id_$parent_delta";
          break;
      }
      $new_row[$key] = $value;
    }
    $terms[] = $new_row;
  }
  
  return $terms;
}